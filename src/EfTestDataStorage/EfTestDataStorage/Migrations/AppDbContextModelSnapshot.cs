// <auto-generated />
using System;
using EfTestDataStorage.EfDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfTestDataStorage.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EfTestDataStorage.Entities.DocumentEntities.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_document_types");

                    b.ToTable("document_types");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.DocumentEntities.EmployeeDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DocumentFields")
                        .HasColumnType("jsonb")
                        .HasColumnName("document_fields");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_type_id");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.HasKey("Id")
                        .HasName("pk_employee_documents");

                    b.HasIndex("DocumentTypeId")
                        .HasDatabaseName("ix_employee_documents_document_type_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_employee_documents_employee_id");

                    b.ToTable("employee_documents");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_employees_position_id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.EmployeePersonalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.HasKey("Id")
                        .HasName("pk_employee_personal_infos");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("ix_employee_personal_infos_employee_id");

                    b.ToTable("employee_personal_infos");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.EmployeeRole", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("EmployeeId", "RoleId")
                        .HasName("pk_employee_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_employee_roles_role_id");

                    b.ToTable("employee_roles");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.EmployeeUnit", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.HasKey("EmployeeId", "UnitId")
                        .HasName("pk_employee_units");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_employee_units_unit_id");

                    b.ToTable("employee_units");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentUnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_unit_id");

                    b.Property<Guid>("UnitHeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_head_id");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.HasIndex("ParentUnitId")
                        .HasDatabaseName("ix_units_parent_unit_id");

                    b.HasIndex("UnitHeadId")
                        .HasDatabaseName("ix_units_unit_head_id");

                    b.ToTable("units");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_set_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("technologies");

                    b.Property<string>("Tools")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tools");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("ProjectSetId")
                        .HasDatabaseName("ix_projects_project_set_id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectEmployee", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("ProjectId", "EmployeeId")
                        .HasName("pk_project_employees");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_project_employees_employee_id");

                    b.ToTable("project_employees");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectRole", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("ProjectRoleTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_role_type_id");

                    b.HasKey("ProjectId", "EmployeeId", "ProjectRoleTypeId")
                        .HasName("pk_project_roles");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_project_roles_employee_id");

                    b.HasIndex("ProjectRoleTypeId")
                        .HasDatabaseName("ix_project_roles_project_role_type_id");

                    b.ToTable("project_roles");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectRoleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project_role_types");

                    b.ToTable("project_role_types");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project_sets");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_project_sets_customer_id");

                    b.ToTable("project_sets");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.DocumentEntities.EmployeeDocument", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.DocumentEntities.DocumentType", "DocumentType")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_documents_document_types_document_type_id");

                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Employee", "Employee")
                        .WithMany("Documents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_documents_employees_employee_id");

                    b.Navigation("DocumentType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Employee", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_positions_position_id");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.EmployeePersonalInfo", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Employee", "Employee")
                        .WithOne("PersonalInfo")
                        .HasForeignKey("EfTestDataStorage.Entities.IdentityEntities.EmployeePersonalInfo", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_personal_infos_employees_employee_id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.EmployeeRole", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Employee", "Employee")
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_roles_employees_employee_id");

                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Role", "Role")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_roles_roles_role_id");

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.EmployeeUnit", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Employee", "Employee")
                        .WithMany("Units")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_units_employees_employee_id");

                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Unit", "Unit")
                        .WithMany("EmployeeUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_units_units_unit_id");

                    b.Navigation("Employee");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Unit", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Unit", "ParentUnit")
                        .WithMany("SubUnits")
                        .HasForeignKey("ParentUnitId")
                        .HasConstraintName("fk_units_units_parent_unit_id");

                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Employee", "UnitHead")
                        .WithMany("SubordinateUnits")
                        .HasForeignKey("UnitHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_units_employees_unit_head_id");

                    b.Navigation("ParentUnit");

                    b.Navigation("UnitHead");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.Project", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.ProjectEntities.ProjectSet", "ProjectSet")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_project_sets_project_set_id");

                    b.Navigation("ProjectSet");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectEmployee", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_employees_employees_employee_id");

                    b.HasOne("EfTestDataStorage.Entities.ProjectEntities.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_employees_projects_project_id");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectRole", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.IdentityEntities.Employee", "Employee")
                        .WithMany("ProjectRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_roles_employees_employee_id");

                    b.HasOne("EfTestDataStorage.Entities.ProjectEntities.Project", "Project")
                        .WithMany("ProjectRoles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_roles_projects_project_id");

                    b.HasOne("EfTestDataStorage.Entities.ProjectEntities.ProjectRoleType", "ProjectRoleType")
                        .WithMany("ProjectRoles")
                        .HasForeignKey("ProjectRoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_roles_project_role_types_project_role_type_id");

                    b.Navigation("Employee");

                    b.Navigation("Project");

                    b.Navigation("ProjectRoleType");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectSet", b =>
                {
                    b.HasOne("EfTestDataStorage.Entities.ProjectEntities.Customer", "Customer")
                        .WithMany("ProjectSets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_sets_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.DocumentEntities.DocumentType", b =>
                {
                    b.Navigation("EmployeeDocuments");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Employee", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("EmployeeProjects");

                    b.Navigation("PersonalInfo")
                        .IsRequired();

                    b.Navigation("ProjectRoles");

                    b.Navigation("Roles");

                    b.Navigation("SubordinateUnits");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Role", b =>
                {
                    b.Navigation("EmployeeRoles");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.IdentityEntities.Unit", b =>
                {
                    b.Navigation("EmployeeUnits");

                    b.Navigation("SubUnits");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.Customer", b =>
                {
                    b.Navigation("ProjectSets");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.Project", b =>
                {
                    b.Navigation("ProjectEmployees");

                    b.Navigation("ProjectRoles");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectRoleType", b =>
                {
                    b.Navigation("ProjectRoles");
                });

            modelBuilder.Entity("EfTestDataStorage.Entities.ProjectEntities.ProjectSet", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
